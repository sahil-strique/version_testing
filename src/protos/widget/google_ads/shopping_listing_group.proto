syntax = "proto3";

package strique.model.widget.google_ads;

import "constants/ui/render_type.proto";
import "constants/ui/sorting_direction.proto";
import "options/strique_enum_options.proto";
import "types/currency/currency.proto";

option java_outer_classname = "ShoppingListingGroupProto";
option java_package = "com.strique.model.widget.googleads";

// Next Id: 5
// Proto definition for Shopping Listing Group Data.
message ShoppingListingGroupData {
  // Title for this widget.
  string widget_title = 1;

  // List of records for this widget.
  repeated ShoppingListingGroupRecord records = 2;

  // Total record.
  optional ShoppingListingGroupRecord total = 3;

  // Summary data for a subset of records.
  optional ShoppingListingGroupRecord subtotal = 4;
}

// Next Id: 9
// Proto definition for a single record of Shopping Listing Group.
message ShoppingListingGroupRecord {
  // Listing group name.
  string listing_group_name = 1 [json_name = "listingGroupName"];

  // Asset group name.
  string asset_group_name = 2 [json_name = "assetGroupName"];

  // Cost incurred for the listing group.
  types.Currency cost = 3 [json_name = "cost"];

  // Number of impressions.
  // Number of times the ad was viewed.
  uint64 impressions = 4 [json_name = "impressions"];

  // Number of clicks.
  uint64 clicks = 5 [json_name = "clicks"];

  // Average cost per click (CPC).
  types.Currency average_cost_per_click = 6 [json_name = "averageCostPerClick"];

  // Average cost per conversion.
  types.Currency average_cost_per_conversions = 7 [json_name = "averageCostPerConversions"];

  // Conversion rate.
  // Percentage of clicks that resulted in a conversion.
  float conversion_rate = 8 [json_name = "conversionRate"];
}

// Next Id: 3
// Proto definition for Shopping Listing Group Configuration.
message ShoppingListingGroupConfig {
  // Next Id: 9
  // Enumeration of possible columns in the Shopping Listing Group table.
  enum Column {
    COLUMN_UNKNOWN = 0 [
      (options.label) = 'Unknown',
      (options.accessor_key) = '',
      (options.is_sortable) = false
    ];
    COLUMN_LISTING_GROUP_NAME = 1 [
      (options.label) = 'Listing group',
      (options.accessor_key) = 'listingGroupName',
      (options.is_sortable) = false
    ];
    COLUMN_ASSET_GROUP_NAME = 2 [
      (options.label) = 'Asset group',
      (options.accessor_key) = 'assetGroupName',
      (options.is_sortable) = false
    ];
    COLUMN_COST = 3 [
      (options.label) = 'Cost',
      (options.accessor_key) = 'cost',
      (options.is_sortable) = true
    ];
    COLUMN_IMPRESSIONS = 4 [
      (options.label) = 'Impressions',
      (options.accessor_key) = 'impressions',
      (options.is_sortable) = true
    ];
    COLUMN_CLICKS = 5 [
      (options.label) = 'Clicks',
      (options.accessor_key) = 'clicks',
      (options.is_sortable) = true
    ];
    COLUMN_AVERAGE_COST_PER_CLICK = 6 [
      (options.label) = 'Avg. CPC',
      (options.accessor_key) = 'averageCostPerClick',
      (options.is_sortable) = true
    ];
    COLUMN_AVERAGE_COST_PER_CONVERSIONS = 7 [
      (options.label) = 'Avg. Cost per conversion',
      (options.accessor_key) = 'averageCostPerConversions',
      (options.is_sortable) = true
    ];
    COLUMN_CONVERSION_RATE = 8 [
      (options.label) = 'Conversion rate',
      (options.accessor_key) = 'conversionRate',
      (options.is_sortable) = true
    ];
  }

  // Next Id: 7
  // Configuration for the table displayed in the Shopping Listing Group.
  message TableConfig {
    // Specifies the order of columns in the table.
    repeated Column column_order = 1;

    // Specifies columns to be hidden in the table.
    repeated Column column_hidden = 2;

    // Specifies the default column used for sorting.
    Column default_sorted_column = 3;

    // Specifies the sorting direction.
    constants.ui.SortingDirection sorting_direction = 4;

    // Indicates whether to display the total row in the table.
    bool show_total = 5;

    // Indicates whether to display the subtotal row in the table.
    bool show_subtotal = 6;
  }

  // Specifies the type of rendering for the widget.
  constants.ui.RenderType render_type = 1;

  // Configuration for the table displayed in the widget.
  TableConfig table_config = 2;
}
