syntax = "proto3";

package strique.model.widget.google_analytics;

import "constants/ui/chart_orientation.proto";
import "constants/ui/render_type.proto";
import "constants/ui/sorting_direction.proto";
import "options/strique_enum_options.proto";
import "types/currency/currency.proto";
import "types/media/media.proto";

option java_outer_classname = "TopPerformingProductsProto";
option java_package = "com.strique.model.widget.googleanalytics";

// Next Id: 5
// Proto definition for Top Performing Products Data.
message TopPerformingProductsData {
  // Title for this widget.
  string widget_title = 1;

  // List of records for this widget.
  repeated TopPerformingProductsRecord records = 2;

  // Total record.
  optional TopPerformingProductsRecord total = 3;

  // Summary data for a subset of records.
  optional TopPerformingProductsRecord subtotal = 4;
}

// Next Id: 7
// Proto definition for a single record of Top Performing Products.
message TopPerformingProductsRecord {
  // Product details.
  // Details of the product (name, image url, etc).
  types.Media product = 1 [json_name = "product"];

  // Sessions.
  // Number of total sessions.
  uint64 sessions = 2 [json_name = "sessions"];

  // Product views.
  // Number of times the product was viewed.
  uint64 product_views = 3 [json_name = "productViews"];

  // Product Add to Carts (ATC).
  // Number of times a specific product was added to the cart.
  uint64 product_add_to_carts = 4 [json_name = "productAddToCarts"];

  // Product Purchases.
  // Number of completed purchases for a specific product.
  uint64 product_purchases = 5 [json_name = "productPurchases"];

  // Product Revenue.
  // Revenue generated by a specific product.
  types.Currency product_revenue = 6 [json_name = "productRevenue"];
}

// Next Id: 4
// Proto definition for Top Performing Products Data Configuration.
message TopPerformingProductsConfig {
  // Next Id: 7
  // Enumeration of possible columns in the Top Performing Products Data table.
  enum Column {
    COLUMN_UNKNOWN = 0 [
      (options.label) = 'Unknown',
      (options.accessor_key) = '',
      (options.is_sortable) = false
    ];
    COLUMN_PRODUCT = 1 [
      (options.label) = 'Product',
      (options.accessor_key) = 'product',
      (options.is_sortable) = false
    ];
    COLUMN_SESSIONS = 2 [
      (options.label) = 'Sessions',
      (options.accessor_key) = 'sessions',
      (options.is_sortable) = true
    ];
    COLUMN_PRODUCT_VIEWS = 3 [
      (options.label) = 'Views',
      (options.accessor_key) = 'productViews',
      (options.is_sortable) = true
    ];
    COLUMN_PRODUCT_ADD_TO_CARTS = 4 [
      (options.label) = 'Add to cart',
      (options.accessor_key) = 'productAddToCarts',
      (options.is_sortable) = true
    ];
    COLUMN_PRODUCT_PURCHASES = 5 [
      (options.label) = 'Purchases',
      (options.accessor_key) = 'productPurchases',
      (options.is_sortable) = true
    ];
    COLUMN_PRODUCT_REVENUE = 6 [
      (options.label) = 'Revenue',
      (options.accessor_key) = 'productRevenue',
      (options.is_sortable) = true
    ];
  }

  // Next Id: 7
  // Configuration for the table displayed in the Top Performing Products Data.
  message TableConfig {
    // Specifies the order of columns in the table.
    repeated Column column_order = 1;

    // Specifies columns to be hidden in the table.
    repeated Column column_hidden = 2;

    // Specifies the default column used for sorting.
    Column default_sorted_column = 3;

    // Specifies the sorting direction.
    constants.ui.SortingDirection sorting_direction = 4;

    // Indicates whether to display the total row in the table.
    bool show_total = 5;

    // Indicates whether to display the subtotal row in the table.
    bool show_subtotal = 6;
  }

  // Next Id: 4
  // Configuration for the bar chart displayed in the Top Performing Products Data.
  message BarChartConfig {
    // Specifies the dimension for the bar chart.
    Column dimension = 1;

    // Specifies the bars for the bar chart.
    repeated Column bars = 2;

    // Specifies the orientation for the bar chart.
    constants.ui.ChartOrientation orientation = 3;
  }

  // Specifies the type of rendering for the widget.
  constants.ui.RenderType render_type = 1;

  // Configuration for the table displayed in the widget.
  TableConfig table_config = 2;

  // Configuration for the bar chart displayed in the widget.
  BarChartConfig bar_chart_config = 3;
}
