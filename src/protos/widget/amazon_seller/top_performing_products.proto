syntax = "proto3";

package strique.model.widget.amazon_seller;

import "constants/ui/render_type.proto";
import "constants/ui/sorting_direction.proto";
import "options/strique_enum_options.proto";
import "types/currency/currency.proto";

option java_outer_classname = "TopPerformingProductsProto";
option java_package = "com.strique.model.widget.amazonseller";

// Next Id: 5
// Proto definition for Top Performing Products Data.
message TopPerformingProductsData {
  // Title for this widget.
  string widget_title = 1;

  // List of records for this widget.
  repeated TopPerformingProductsRecord records = 2;

  // Total record.
  optional TopPerformingProductsRecord total = 3;

  // Summary data for a subset of records.
  optional TopPerformingProductsRecord subtotal = 4;
}

// Next Id: 9
// Proto definition for a single record of Top Performing Products.
message TopPerformingProductsRecord {
  // Parent ASIN (Amazon Standard Identification Number).
  string parent_asin = 1 [json_name = "parentAsin"];

  // Child ASIN.
  string child_asin = 2 [json_name = "childAsin"];

  // Product title.
  string title = 3 [json_name = "title"];

  // Number of sessions.
  // Number of browsing sessions where the product was viewed.
  uint64 sessions = 4 [json_name = "sessions"];

  // Number of page views.
  // Number of times the product page was viewed.
  uint64 page_views = 5 [json_name = "pageViews"];

  // Featured offer buy box percentage.
  // Percentage of sessions where the product was the featured offer.
  float featured_offer_buy_box_percentage = 6 [json_name = "featuredOfferBuyBoxPercentage"];

  // Number of units ordered.
  uint64 units_ordered = 7 [json_name = "unitsOrdered"];

  // Ordered product sales.
  // Total sales amount for the ordered units.
  types.Currency ordered_product_sales = 8 [json_name = "orderedProductSales"];
}

// Next Id: 3
// Proto definition for Top Performing Products Data Configuration.
message TopPerformingProductsConfig {
  // Next Id: 8
  // Enumeration of possible columns in the Top Performing Products Data table.
  enum Column {
    COLUMN_UNKNOWN = 0 [
      (options.label) = 'Unknown',
      (options.accessor_key) = '',
      (options.is_sortable) = false
    ];
    COLUMN_PARENT_ASIN = 1 [
      (options.label) = 'Parent ASIN',
      (options.accessor_key) = 'parentAsin',
      (options.is_sortable) = false
    ];
    COLUMN_CHILD_ASIN = 2 [
      (options.label) = 'Child ASIN',
      (options.accessor_key) = 'childAsin',
      (options.is_sortable) = false
    ];
    COLUMN_TITLE = 3 [
      (options.label) = 'Title',
      (options.accessor_key) = 'title',
      (options.is_sortable) = false
    ];
    COLUMN_SESSIONS = 4 [
      (options.label) = 'Sessions',
      (options.accessor_key) = 'sessions',
      (options.is_sortable) = true
    ];
    COLUMN_PAGE_VIEWS = 5 [
      (options.label) = 'Page views',
      (options.accessor_key) = 'pageViews',
      (options.is_sortable) = true
    ];
    COLUMN_FEATURED_OFFER_BUY_BOX_PERCENTAGE = 6 [
      (options.label) = 'Featured offer (Buy Box) %',
      (options.accessor_key) = 'featuredOfferBuyBoxPercentage',
      (options.is_sortable) = true
    ];
    COLUMN_UNITS_ORDERED = 7 [
      (options.label) = 'Units ordered',
      (options.accessor_key) = 'unitsOrdered',
      (options.is_sortable) = true
    ];
    COLUMN_ORDERED_PRODUCT_SALES = 8 [
      (options.label) = 'Ordered product sales',
      (options.accessor_key) = 'orderedProductSales',
      (options.is_sortable) = true
    ];
  }

  // Next Id: 7
  // Configuration for the table displayed in the Top Performing Products Data.
  message TableConfig {
    // Specifies the order of columns in the table.
    repeated Column column_order = 1;

    // Specifies columns to be hidden in the table.
    repeated Column column_hidden = 2;

    // Specifies the default column used for sorting.
    Column default_sorted_column = 3;

    // Specifies the sorting direction.
    constants.ui.SortingDirection sorting_direction = 4;

    // Indicates whether to display the total row in the table.
    bool show_total = 5;

    // Indicates whether to display the subtotal row in the table.
    bool show_subtotal = 6;
  }

  // Specifies the type of rendering for the widget.
  constants.ui.RenderType render_type = 1;

  // Configuration for the table displayed in the widget.
  TableConfig table_config = 2;
}
